% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_management.R
\name{add_study_data}
\alias{add_study_data}
\title{Add Study Data to a metawoRld Project}
\usage{
add_study_data(path = ".", study_id, metadata_list, data_df, overwrite = FALSE)
}
\arguments{
\item{path}{Character string. The path to the root directory of the
metawoRld project. Defaults to the current working directory (\code{.}).}

\item{study_id}{Character string. A unique identifier for the study (e.g.,
PMID, DOI, or a custom ID). This will be used as the directory name
within the \verb{data/} folder. Should be filesystem-friendly.}

\item{metadata_list}{List. A named list containing the study's metadata,
conforming to the \code{metadata_fields} defined in the project's schema.
Must include \code{measurement_methods} and \code{outcome_groups} as named lists
if linkage validation is expected.}

\item{data_df}{Data frame. A data frame containing the quantitative data,
conforming to the \code{data_fields} defined in the project's schema.
Must include \code{method_ref_id} and \code{group_label} columns matching keys in
\code{metadata_list} for linkage validation.}

\item{overwrite}{Logical. If a directory for \code{study_id} already exists,
should its contents be overwritten? Defaults to \code{FALSE}.}
}
\value{
Invisibly returns the path to the created or updated study directory.
}
\description{
Adds the metadata (YAML) and quantitative data (CSV) for a single study
to the project, performing validation against the project's schema.
}
\examples{
\dontrun{
# --- Setup: Create a temporary project ---
proj_path <- file.path(tempdir(), "add_study_test")
create_metawoRld(
  path = proj_path,
  project_name = "Add Study Test",
  project_description = "Testing add_study_data()"
)

# --- Prepare Sample Data ---
study_meta <- list(
  study_id = "PMID12345",
  title = "Test Study One",
  authors = list("Doe J"), year = 2023, journal = "Test Journal",
  study_design = "Case-Control", country = "Testland", sample_type = "Serum",
  outcome_groups = list(
     grpA = list(name = "Cases", definition = "Has condition X"),
     grpB = list(name = "Controls", definition = "Healthy participants")
   ),
  measurement_methods = list(
    method1 = list(analysis_type = "ELISA", target_cytokine = "IL-TEST", unit = "pg/mL"),
    method2 = list(analysis_type = "LC-MS", target_cytokine = "CYTO-X", unit = "ng/mL")
   ),
  datafindr_assessment = list(relevance_score = 0.9, rationale = "Looks good")
)

study_data <- data.frame(
  measurement_id = c("m1", "m2", "m3", "m4"),
  method_ref_id = c("method1", "method1", "method2", "method2"),
  cytokine_name = c("IL-TEST", "IL-TEST", "CYTO-X", "CYTO-X"),
  group_label = c("grpA", "grpB", "grpA", "grpB"),
  gestational_age_timing = rep("T2", 4),
  n = c(20, 40, 18, 35),
  statistic_type = rep("mean_sd", 4),
  value1 = c(10.1, 5.5, 105.2, 80.1),
  value2 = c(2.1, 1.5, 25.0, 15.5),
  notes = c("", "Lower detection limit", "", "")
)

# --- Add the study data ---
add_study_data(
  path = proj_path,
  study_id = "PMID12345",
  metadata_list = study_meta,
  data_df = study_data
)

# Verify files were created
list.files(file.path(proj_path, "data", "PMID12345"))

# Try adding again without overwrite (should fail)
tryCatch(
  add_study_data(proj_path, "PMID12345", study_meta, study_data),
  error = function(e) print(e$message)
)

# Add again with overwrite
add_study_data(
 path = proj_path,
 study_id = "PMID12345",
 metadata_list = study_meta, # Can modify data here if needed
 data_df = study_data,
 overwrite = TRUE
)

# --- Example of failed validation ---
study_data_bad_link <- study_data
study_data_bad_link$method_ref_id[1] <- "method_BAD" # Non-existent method
tryCatch(
  add_study_data(proj_path, "PMID_bad_link", study_meta, study_data_bad_link),
  error = function(e) print(e$message)
)

study_meta_missing_req <- study_meta
study_meta_missing_req$study_design <- NULL # Remove a required field
tryCatch(
  add_study_data(proj_path, "PMID_missing_req", study_meta_missing_req, study_data),
  error = function(e) print(e$message)
)

# --- Clean up ---
unlink(proj_path, recursive = TRUE)
}
}
