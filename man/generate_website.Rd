% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_webpage.R
\name{generate_website}
\alias{generate_website}
\title{Generate or Update the Full Project Website}
\usage{
generate_website(proj_path = ".", render = TRUE)
}
\arguments{
\item{proj_path}{Path to the metawoRld project. Defaults to the current
working directory (\code{.}).}

\item{render}{Logical. If \code{TRUE} (the default), the function will call
\code{quarto::quarto_render()} to build the website after generating the source
files. Requires the \code{quarto} package.}
}
\value{
Invisibly returns the project path. The primary effect is the
  creation and rendering of website files.
}
\description{
This is a high-level function that orchestrates the generation of all
components of the metawoRld project's Quarto website. It is designed
to be used in automated contexts like GitHub Actions.

The function performs the following steps:
\enumerate{
\item Generates the base website structure (e.g., \code{_quarto.yml}, \code{index.qmd})
   using the project's configuration, overwriting existing files to ensure
   the site is up-to-date with the current package templates.
\item Generates individual \code{.qmd} pages for each study found in the project.
\item Renders the entire Quarto project to produce the final website (e.g., in \code{_site/}).
}
}
\examples{
\dontrun{
# Setup a temporary project for demonstration
temp_dir <- tempfile("metawoRld-website")
create_metawoRld(
  path = temp_dir,
  project_name = "Website Example",
  project_description = "A project to demonstrate website generation."
)

# Generate the full website
generate_website(proj_path = temp_dir)

# Check if the output directory exists
site_dir <- file.path(temp_dir, "_site")
print(paste("Website generated in:", site_dir, "-", dir.exists(site_dir)))

# Clean up
unlink(temp_dir, recursive = TRUE)
}
}
