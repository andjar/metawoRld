[{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://andjar.github.io/metawoRld/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://andjar.github.io/metawoRld/articles/conceptual_overview.html","id":"introduction-towards-living-reviews","dir":"Articles","previous_headings":"","what":"Introduction: Towards Living Reviews","title":"Conceptual Overview: The Living Review Pipeline","text":"Systematic reviews meta-analyses crucial synthesizing evidence, time-consuming create quickly become outdated. “living review” aims continuously incorporate new evidence becomes available. project provides framework tools build AI-assisted pipeline creating living reviews, focusing initially serum cytokine data human pregnancy. pipeline consists two core R packages: metawoRld: foundation storing, managing, presenting structured review data. DataFindR: AI-powered engine finding, assessing, extracting data scientific literature populate metawoRld project.","code":""},{"path":"https://andjar.github.io/metawoRld/articles/conceptual_overview.html","id":"the-metaworld-package-structure-and-presentation","dir":"Articles","previous_headings":"","what":"The metawoRld Package: Structure and Presentation","title":"Conceptual Overview: The Living Review Pipeline","text":"metawoRld provides structured environment living review. key roles : Project Initialization: Creates standardized project directory structure (create_metawoRld). Schema Definition: Defines precise data structure expected metadata quantitative results _metawoRld.yml. includes fields, required/optional status, expected formats (e.g., outcome groups, measurement methods). metadata.yml: Study design, population, methods, group definitions. data.csv: Quantitative cytokine measurements, linked back metadata. Data Validation: Includes functions validate incoming data project schema (add_study_data, validate_study, validate_world). Data Loading: Provides functions load structured data back R analysis (load_metawoRld). Presentation: Includes templates functions generate Quarto website, providing browsable overview included studies key findings. Essentially, metawoRld ensures data consistently structured, validated, accessible analysis presentation.","code":""},{"path":"https://andjar.github.io/metawoRld/articles/conceptual_overview.html","id":"the-datafindr-package-ai-assisted-data-collection","dir":"Articles","previous_headings":"","what":"The DataFindR Package: AI-Assisted Data Collection","title":"Conceptual Overview: The Living Review Pipeline","text":"DataFindR leverages Large Language Models (LLMs) automate parts literature screening data extraction process. interacts closely metawoRld project: Input Acquisition: Takes study identifiers (DOIs, PMIDs) input. Metadata Fetching: Retrieves abstracts bibliographic details online sources (df_fetch_metadata). Relevance Assessment: Uses LLM, guided inclusion/exclusion criteria defined metawoRld project’s _metawoRld.yml, assess relevance study based title abstract (df_assess_relevance). Provides score rationale. Includes interactive Shiny app (df_shiny_assess) step. Data Extraction: relevant papers, uses LLM, guided detailed data schema _metawoRld.yml, extract specific data points (cytokine levels, group sizes, methods, etc.) full text (PDF text). Prompt Generation: Creates detailed prompts LLM based metawoRld schema (df_generate_assessment_prompt, df_generate_extraction_prompt). Output Formatting: Aims receive structured JSON output LLM. Caching: Caches results metadata fetching LLM calls within metawoRld project (.metawoRld_cache/datafindr/) avoid redundant work API costs, facilitating collaboration. Integration: Parses extracted data uses metawoRld::add_study_data() save structured project. DataFindR acts intelligent agent feeding validated, structured data metawoRld repository.","code":""},{"path":"https://andjar.github.io/metawoRld/articles/conceptual_overview.html","id":"overall-workflow","dir":"Articles","previous_headings":"","what":"Overall Workflow","title":"Conceptual Overview: The Living Review Pipeline","text":"typical workflow using packages looks like : Setup: Create metawoRld project, defining scope, criteria, desired data schema _metawoRld.yml. Screening: Use DataFindR (df_assess_relevance df_shiny_assess) process list DOIs/PMIDs, leveraging LLMs project criteria identify potentially relevant papers. Extraction: relevant papers, obtain full text use DataFindR’s extraction capabilities (future function, e.g., df_extract_from_file) pull data according metawoRld schema. Saving: extracted validated data saved metawoRld project structure using metawoRld::add_study_data. Presentation: Re-render metawoRld Quarto website (quarto::quarto_render()) include latest studies. Analysis: Use metawoRld::load_metawoRld() load data custom analysis meta-analysis.","code":"#> Install DiagrammeR to see the workflow diagram."},{"path":"https://andjar.github.io/metawoRld/articles/conceptual_overview.html","id":"interaction-between-packages","dir":"Articles","previous_headings":"","what":"Interaction Between Packages","title":"Conceptual Overview: The Living Review Pipeline","text":"Schema: metawoRld defines schema; DataFindR reads generate prompts structure output. Criteria: metawoRld stores inclusion/exclusion criteria; DataFindR reads assessment prompt. Data Flow: DataFindR extracts data; metawoRld validates stores . Caching: DataFindR writes cache within active metawoRld project directory persistence collaboration. interconnected design allows modular yet integrated approach building maintaining living review dataset.","code":""},{"path":"https://andjar.github.io/metawoRld/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anders Hagen Jarmund. Author, maintainer.","code":""},{"path":"https://andjar.github.io/metawoRld/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jarmund (2025). metawoRld: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {metawoRld: What the Package Does (One Line, Title Case)},   author = {Anders Hagen Jarmund},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"https://andjar.github.io/metawoRld/index.html","id":"metaworld-a-framework-for-structured-living-review-data","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"metawoRld package provides foundational structure creating managing data living systematic reviews. helps ensure data consistently structured, validated, stored reproducibly (using YAML/CSV), can easily loaded analysis presentation. designed work tandem DataFindR package, uses AI help populate metawoRld project data extracted scientific literature. Please see Conceptual Overview vignette detailed explanation entire living review pipeline metawoRld DataFindR work together.","code":""},{"path":"https://andjar.github.io/metawoRld/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"","code":"# Assuming metawoRld is on GitHub (replace 'andjar/metawoRld') # install.packages(\"remotes\") remotes::install_github(\"andjar/metawoRld\")  # You will likely also need DataFindR # remotes::install_github(\"andjar/DataFindR\")"},{"path":"https://andjar.github.io/metawoRld/index.html","id":"example-creating-a-project","dir":"","previous_headings":"","what":"Example: Creating a Project","title":"What the Package Does (One Line, Title Case)","text":"","code":"# library(metawoRld) #  # proj_path <- file.path(tempdir(), \"my_living_review\") #  # # Clean up previous run if needed # if(dir.exists(proj_path)) unlink(proj_path, recursive = TRUE) #  # create_metawoRld( #   path = proj_path, #   project_name = \"Cytokines in Pregnancy\", #   project_description = \"A test living review project.\", #   # Define criteria and schema details here or rely on defaults #   inclusion_criteria = c(\"Human\", \"Pregnancy\", \"Serum/Plasma\", \"Cytokine\"), #   exclusion_criteria = c(\"Animal\", \"Review\", \"Non-English\") # ) #  # list.files(proj_path)  # Clean up # unlink(proj_path, recursive = TRUE)"},{"path":"https://andjar.github.io/metawoRld/reference/add_study_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Study Data to a metawoRld Project — add_study_data","title":"Add Study Data to a metawoRld Project — add_study_data","text":"Adds metadata (YAML) quantitative data (CSV) single study project, performing validation project's schema.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/add_study_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Study Data to a metawoRld Project — add_study_data","text":"","code":"add_study_data(path = \".\", study_id, metadata_list, data_df, overwrite = FALSE)"},{"path":"https://andjar.github.io/metawoRld/reference/add_study_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Study Data to a metawoRld Project — add_study_data","text":"path Character string. path root directory metawoRld project. Defaults current working directory (.). study_id Character string. unique identifier study (e.g., PMID, DOI, custom ID). used directory name within data/ folder. filesystem-friendly. metadata_list List. named list containing study's metadata, conforming metadata_fields defined project's schema. Must include measurement_methods outcome_groups named lists linkage validation expected. data_df Data frame. data frame containing quantitative data, conforming data_fields defined project's schema. Must include method_ref_id group_label columns matching keys metadata_list linkage validation. overwrite Logical. directory study_id already exists, contents overwritten? Defaults FALSE.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/add_study_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Study Data to a metawoRld Project — add_study_data","text":"Invisibly returns path created updated study directory.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/add_study_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Study Data to a metawoRld Project — add_study_data","text":"","code":"if (FALSE) { # \\dontrun{ # --- Setup: Create a temporary project --- proj_path <- file.path(tempdir(), \"add_study_test\") create_metawoRld(   path = proj_path,   project_name = \"Add Study Test\",   project_description = \"Testing add_study_data()\" )  # --- Prepare Sample Data --- study_meta <- list(   study_id = \"PMID12345\",   title = \"Test Study One\",   authors = list(\"Doe J\"), year = 2023, journal = \"Test Journal\",   study_design = \"Case-Control\", country = \"Testland\", sample_type = \"Serum\",   outcome_groups = list(      grpA = list(name = \"Cases\", definition = \"Has condition X\"),      grpB = list(name = \"Controls\", definition = \"Healthy participants\")    ),   measurement_methods = list(     method1 = list(analysis_type = \"ELISA\", target_cytokine = \"IL-TEST\", unit = \"pg/mL\"),     method2 = list(analysis_type = \"LC-MS\", target_cytokine = \"CYTO-X\", unit = \"ng/mL\")    ),   datafindr_assessment = list(relevance_score = 0.9, rationale = \"Looks good\") )  study_data <- data.frame(   measurement_id = c(\"m1\", \"m2\", \"m3\", \"m4\"),   method_ref_id = c(\"method1\", \"method1\", \"method2\", \"method2\"),   cytokine_name = c(\"IL-TEST\", \"IL-TEST\", \"CYTO-X\", \"CYTO-X\"),   group_label = c(\"grpA\", \"grpB\", \"grpA\", \"grpB\"),   gestational_age_timing = rep(\"T2\", 4),   n = c(20, 40, 18, 35),   statistic_type = rep(\"mean_sd\", 4),   value1 = c(10.1, 5.5, 105.2, 80.1),   value2 = c(2.1, 1.5, 25.0, 15.5),   notes = c(\"\", \"Lower detection limit\", \"\", \"\") )  # --- Add the study data --- add_study_data(   path = proj_path,   study_id = \"PMID12345\",   metadata_list = study_meta,   data_df = study_data )  # Verify files were created list.files(file.path(proj_path, \"data\", \"PMID12345\"))  # Try adding again without overwrite (should fail) tryCatch(   add_study_data(proj_path, \"PMID12345\", study_meta, study_data),   error = function(e) print(e$message) )  # Add again with overwrite add_study_data(  path = proj_path,  study_id = \"PMID12345\",  metadata_list = study_meta, # Can modify data here if needed  data_df = study_data,  overwrite = TRUE )  # --- Example of failed validation --- study_data_bad_link <- study_data study_data_bad_link$method_ref_id[1] <- \"method_BAD\" # Non-existent method tryCatch(   add_study_data(proj_path, \"PMID_bad_link\", study_meta, study_data_bad_link),   error = function(e) print(e$message) )  study_meta_missing_req <- study_meta study_meta_missing_req$study_design <- NULL # Remove a required field tryCatch(   add_study_data(proj_path, \"PMID_missing_req\", study_meta_missing_req, study_data),   error = function(e) print(e$message) )  # --- Clean up --- unlink(proj_path, recursive = TRUE) } # }"},{"path":"https://andjar.github.io/metawoRld/reference/add_study_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Study Template Directory to a metawoRld Project — add_study_template","title":"Add a Study Template Directory to a metawoRld Project — add_study_template","text":"Creates new study directory within project's data/ folder, containing template metadata.yml data.csv files based project's schema. files can manually edited.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/add_study_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Study Template Directory to a metawoRld Project — add_study_template","text":"","code":"add_study_template(path = \".\", study_id, overwrite = FALSE)"},{"path":"https://andjar.github.io/metawoRld/reference/add_study_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Study Template Directory to a metawoRld Project — add_study_template","text":"path Character string. path root directory metawoRld project. Defaults current working directory (.). study_id Character string. unique identifier study (e.g., PMID, DOI, custom ID). used directory name. filesystem-friendly. overwrite Logical. directory study_id already exists, contents overwritten new templates? Defaults FALSE.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/add_study_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Study Template Directory to a metawoRld Project — add_study_template","text":"Invisibly returns path created study directory containing template files.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/add_study_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Study Template Directory to a metawoRld Project — add_study_template","text":"","code":"if (FALSE) { # \\dontrun{ # --- Setup: Create a temporary project --- proj_path <- file.path(tempdir(), \"add_template_test\") create_metawoRld(   path = proj_path,   project_name = \"Add Template Test\",   project_description = \"Testing add_study_template()\" )  # --- Add a template for a new study --- add_study_template(   path = proj_path,   study_id = \"FutureStudy2024\" )  # Verify template files were created list.files(file.path(proj_path, \"data\", \"FutureStudy2024\"))  # View the contents of the template metadata.yml cat(readLines(file.path(proj_path, \"data\", \"FutureStudy2024\", \"metadata.yml\")), sep = \"\\n\")  # View the contents of the template data.csv cat(readLines(file.path(proj_path, \"data\", \"FutureStudy2024\", \"data.csv\")), sep = \"\\n\")  # Try adding again without overwrite (should fail) tryCatch(   add_study_template(proj_path, \"FutureStudy2024\"),   error = function(e) print(e$message) )  # Add again with overwrite add_study_template(  path = proj_path,  study_id = \"FutureStudy2024\",  overwrite = TRUE )  # --- Clean up --- unlink(proj_path, recursive = TRUE) } # }"},{"path":"https://andjar.github.io/metawoRld/reference/create_metawoRld.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a New metawoRld Project — create_metawoRld","title":"Create a New metawoRld Project — create_metawoRld","text":"Initializes directory structure, configuration file, Git repository new metawoRld living review project.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/create_metawoRld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a New metawoRld Project — create_metawoRld","text":"","code":"create_metawoRld(   path,   project_name,   project_description,   schema = NULL,   git_init = TRUE,   ... )"},{"path":"https://andjar.github.io/metawoRld/reference/create_metawoRld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a New metawoRld Project — create_metawoRld","text":"path Character string. path new project directory created. directory created already exist. project_name Character string. short, descriptive name project. project_description Character string. longer description project's scope. schema List. list defining structure metadata data files. NULL (default), standard default schema used. See details. git_init Logical. Initialize Git repository project directory? Defaults TRUE. ... Additional key-value pairs add root _metawoRld.yml file.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/create_metawoRld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a New metawoRld Project — create_metawoRld","text":"Invisibly returns normalized path created project directory.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/create_metawoRld.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a New metawoRld Project — create_metawoRld","text":"function creates main project directory path sets following: _metawoRld.yml: main configuration file containing project metadata data schema. data/: empty directory store study-specific subdirectories. .git/: git_init = TRUE, initializes Git repository. .gitignore: standard R/.git/.quarto ignore file. README.md: basic README file. default schema defines expected fields metadata.yml data.csv files within study folder. can provide custom schema using schema argument.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/create_metawoRld.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a New metawoRld Project — create_metawoRld","text":"","code":"if (FALSE) { # \\dontrun{ # Create a project in a temporary directory proj_path <- file.path(tempdir(), \"my_cytokine_review\")  create_metawoRld(   path = proj_path,   project_name = \"Serum Cytokines in Pre-eclampsia\",   project_description = \"A living review of serum cytokine levels associated with PE.\",   inclusion_criteria = c(\"Human studies\", \"Serum samples\", \"Preeclampsia outcome\"),   search_keywords = list(mandatory = c(\"cytokine\", \"serum\", \"preeclampsia\"),                          optional = c(\"pregnancy\", \"biomarker\")) )  # List files in the new project list.files(proj_path, recursive = TRUE)  # Clean up unlink(proj_path, recursive = TRUE) } # }"},{"path":"https://andjar.github.io/metawoRld/reference/dot-desanitize_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Desanitize a Filesystem Identifier — .desanitize_id","title":"Desanitize a Filesystem Identifier — .desanitize_id","text":"Reverses replacements made .sanitize_id().","code":""},{"path":"https://andjar.github.io/metawoRld/reference/dot-desanitize_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Desanitize a Filesystem Identifier — .desanitize_id","text":"","code":".desanitize_id(sanitized_id)"},{"path":"https://andjar.github.io/metawoRld/reference/dot-desanitize_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Desanitize a Filesystem Identifier — .desanitize_id","text":"sanitized_id Character string identifier sanitized .sanitize_id().","code":""},{"path":"https://andjar.github.io/metawoRld/reference/dot-desanitize_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Desanitize a Filesystem Identifier — .desanitize_id","text":"original identifier string.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/dot-sanitize_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanitize an Identifier for Filesystem Use — .sanitize_id","title":"Sanitize an Identifier for Filesystem Use — .sanitize_id","text":"Replaces characters commonly problematic filenames/paths (like '/', ':') safe, unique representations. Reversible .desanitize_id().","code":""},{"path":"https://andjar.github.io/metawoRld/reference/dot-sanitize_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanitize an Identifier for Filesystem Use — .sanitize_id","text":"","code":".sanitize_id(id)"},{"path":"https://andjar.github.io/metawoRld/reference/dot-sanitize_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanitize an Identifier for Filesystem Use — .sanitize_id","text":"id Character string identifier (e.g., DOI, PMID).","code":""},{"path":"https://andjar.github.io/metawoRld/reference/dot-sanitize_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sanitize an Identifier for Filesystem Use — .sanitize_id","text":"sanitized character string suitable filenames.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/get_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Schema from a metawoRld Project — get_schema","title":"Get the Schema from a metawoRld Project — get_schema","text":"Reads _metawoRld.yml configuration file project directory returns defined schema.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/get_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Schema from a metawoRld Project — get_schema","text":"","code":"get_schema(path = \".\")"},{"path":"https://andjar.github.io/metawoRld/reference/get_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Schema from a metawoRld Project — get_schema","text":"path Character string. path root directory metawoRld project. Defaults current working directory (.).","code":""},{"path":"https://andjar.github.io/metawoRld/reference/get_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Schema from a metawoRld Project — get_schema","text":"list representing schema defined project's _metawoRld.yml file. typically includes definitions metadata_fields data_fields. Returns NULL invisibly issues warning schema retrieved.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/get_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Schema from a metawoRld Project — get_schema","text":"","code":"if (FALSE) { # \\dontrun{ # --- Setup: Create a temporary project --- proj_path <- file.path(tempdir(), \"get_schema_test\") create_metawoRld(   path = proj_path,   project_name = \"Schema Test\",   project_description = \"Testing get_schema()\" )  # --- Example Usage --- # Get the schema from the created project project_schema <- get_schema(proj_path) print(project_schema)  # Check specific parts of the schema print(project_schema$metadata_fields$required)  # --- Clean up --- unlink(proj_path, recursive = TRUE) } # }"},{"path":"https://andjar.github.io/metawoRld/reference/load_metawoRld.html","id":null,"dir":"Reference","previous_headings":"","what":"Load All Study Data from a metawoRld Project — load_metawoRld","title":"Load All Study Data from a metawoRld Project — load_metawoRld","text":"Scans project's data/ directory, reads metadata.yml data.csv file valid study subdirectory, compiles information R objects.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/load_metawoRld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load All Study Data from a metawoRld Project — load_metawoRld","text":"","code":"load_metawoRld(path = \".\", verbose = TRUE)"},{"path":"https://andjar.github.io/metawoRld/reference/load_metawoRld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load All Study Data from a metawoRld Project — load_metawoRld","text":"path Character string. path root directory metawoRld project. Defaults current working directory (.). verbose Logical. Print informative messages studies loaded skipped? Defaults TRUE.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/load_metawoRld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load All Study Data from a metawoRld Project — load_metawoRld","text":"list two components: studies_data single data frame combining data data.csv files. includes added study_id column. attempts join relevant information like 'unit' measurement_methods 'group_name' outcome_groups based links defined study's metadata.yml. Columns joined missing specific studies contain NA. studies_metadata list names study_ids values full parsed metadata lists read study's metadata.yml file. Returns NULL invisibly data directory missing valid studies found. Issues warnings studies skipped due missing files errors.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/load_metawoRld.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load All Study Data from a metawoRld Project — load_metawoRld","text":"","code":"if (FALSE) { # \\dontrun{ # --- Setup: Create a temporary project and add two studies --- proj_path <- file.path(tempdir(), \"load_study_test\") create_metawoRld(   path = proj_path,   project_name = \"Load Study Test\",   project_description = \"Testing load_metawoRld()\" )  # Study 1 Data meta1 <- list(   study_id = \"S1\", title = \"Study One\", authors = list(\"A\"), year = 2021,   journal = \"J1\", study_design=\"Cohort\", country=\"X\", sample_type=\"Serum\",   outcome_groups = list(g1=list(name=\"Case\", def=\"...\"), g2=list(name=\"Ctrl\", def=\"...\")),   measurement_methods = list(m1=list(unit=\"pg/mL\", analysis_type=\"E\")),   datafindr_assessment = list(relevance_score=1) ) data1 <- data.frame(measurement_id=\"m1a\", method_ref_id=\"m1\", cytokine_name=\"CK1\",                     group_label=\"g1\", gestational_age_timing=\"T1\", n=10,                     statistic_type=\"mean_sd\", value1=5, value2=1) add_study_data(proj_path, \"S1\", meta1, data1)  # Study 2 Data meta2 <- list(   study_id = \"S2\", title = \"Study Two\", authors = list(\"B\"), year = 2022,   journal = \"J2\", study_design=\"Case-Ctrl\", country=\"Y\", sample_type=\"Plasma\",   outcome_groups = list(grpA=list(name=\"High\", def=\"...\"), grpB=list(name=\"Low\", def=\"...\")),   measurement_methods = list(      assayX = list(unit=\"ng/L\", analysis_type=\"Luminex\", target=\"CK1\"),      assayY = list(unit=\"pg/mL\", analysis_type=\"ELISA\", target=\"CK2\")    ),    datafindr_assessment = list(relevance_score=0.8) ) data2 <- data.frame(measurement_id=c(\"m2a\", \"m2b\"), method_ref_id=c(\"assayX\", \"assayY\"),                     cytokine_name=c(\"CK1\", \"CK2\"), group_label=c(\"grpA\", \"grpA\"),                     gestational_age_timing=c(\"T3\",\"T3\"), n=c(25, 25),                     statistic_type=c(\"median_iqr\", \"mean_sem\"),                     value1=c(500, 12.3), value2=c(\"400-650\", 2.1)) add_study_data(proj_path, \"S2\", meta2, data2)  # Add an empty folder (should be skipped) fs::dir_create(file.path(proj_path, \"data\", \"EmptyFolder\"))  # --- Load the data --- loaded_data <- load_metawoRld(proj_path)  # Explore the results print(\"--- Combined Data Frame ---\") print(loaded_data$studies_data)  print(\"--- List of Metadata ---\") print(names(loaded_data$studies_metadata)) print(loaded_data$studies_metadata$S1$title)  # --- Clean up --- unlink(proj_path, recursive = TRUE) } # }"},{"path":"https://andjar.github.io/metawoRld/reference/metawoRld-package.html","id":null,"dir":"Reference","previous_headings":"","what":"metawoRld: What the Package Does (One Line, Title Case) — metawoRld-package","title":"metawoRld: What the Package Does (One Line, Title Case) — metawoRld-package","text":"package (one paragraph).","code":""},{"path":"https://andjar.github.io/metawoRld/reference/metawoRld-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"metawoRld: What the Package Does (One Line, Title Case) — metawoRld-package","text":"Maintainer: Anders Hagen Jarmund anders.h.jarmund@ntnu.(ORCID)","code":""},{"path":"https://andjar.github.io/metawoRld/reference/validate_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a Single Study's Data Files Against the Project Schema — validate_study","title":"Validate a Single Study's Data Files Against the Project Schema — validate_study","text":"Reads metadata.yml data.csv files specific study ID within metawoRld project checks structure content rules defined project's _metawoRld.yml schema. also checks internal consistency (e.g., links data metadata). useful checking manually edited files (e.g., created using add_study_template).","code":""},{"path":"https://andjar.github.io/metawoRld/reference/validate_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a Single Study's Data Files Against the Project Schema — validate_study","text":"","code":"validate_study(study_id, path = \".\", check_linkages = TRUE)"},{"path":"https://andjar.github.io/metawoRld/reference/validate_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a Single Study's Data Files Against the Project Schema — validate_study","text":"study_id Character string. unique identifier study validate. path Character string. path root directory metawoRld project. Defaults current working directory (.). check_linkages Logical. consistency checks data.csv (method_ref_id, group_label) metadata.yml (measurement_methods, outcome_groups) performed? Defaults TRUE.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/validate_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a Single Study's Data Files Against the Project Schema — validate_study","text":"Returns TRUE (invisibly) validation checks pass. check fails, function stops informative error message using rlang::abort().","code":""},{"path":"https://andjar.github.io/metawoRld/reference/validate_study.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a Single Study's Data Files Against the Project Schema — validate_study","text":"","code":"if (FALSE) { # \\dontrun{ # --- Setup: Create a project and add a template --- proj_path <- file.path(tempdir(), \"validate_study_test\") create_metawoRld(   path = proj_path,   project_name = \"Validate Study Test\",   project_description = \"Testing validate_study()\" ) add_study_template(proj_path, \"ManualStudy01\")  # --- Scenario 1: Validate the raw template (might fail required field checks) --- # This will likely fail because placeholders like \"REQUIRED: ...\" are still present. tryCatch(   validate_study(\"ManualStudy01\", path = proj_path),   error = function(e) print(paste(\"Validation Failed (as expected for raw template):\", e$message)) )  # --- Scenario 2: Manually Edit Files (Simulated) --- # Imagine the user fills the files. Let's simulate correct filling: meta_file <- file.path(proj_path, \"data\", \"ManualStudy01\", \"metadata.yml\") data_file <- file.path(proj_path, \"data\", \"ManualStudy01\", \"data.csv\")  # Create valid-looking content programmatically for the example valid_meta <- list(   study_id = \"ManualStudy01\", title = \"Manually Entered Study\",   authors = list(\"User U\"), year = 2024, journal = \"Data Entry Journal\",   study_design = \"Cross-sectional\", country = \"Local\", sample_type = \"Serum\",   outcome_groups = list(     g1 = list(name = \"Group A\", definition = \"Criteria A\"),     g2 = list(name = \"Group B\", definition = \"Criteria B\")   ),   measurement_methods = list(     m_elisa = list(analysis_type = \"ELISA\", target_cytokine = \"CYTOK\", unit = \"pg/mL\")   )   # Optional fields omitted for brevity ) yaml::write_yaml(valid_meta, meta_file)  valid_data <- data.frame(   measurement_id = \"meas1\", method_ref_id = \"m_elisa\", cytokine_name = \"CYTOK\",   group_label = \"g1\", gestational_age_timing = \"Any\", n = 50,   statistic_type = \"mean_sd\", value1 = 10.0, value2 = 2.5 ) readr::write_csv(valid_data, data_file)  # --- Scenario 3: Validate the correctly filled study --- validate_study(\"ManualStudy01\", path = proj_path) # Should now pass and print success  # --- Scenario 4: Introduce an error (e.g., bad group_label in data.csv) --- invalid_data <- valid_data invalid_data$group_label[1] <- \"g_BAD\" # This label doesn't exist in metadata readr::write_csv(invalid_data, data_file)  tryCatch(   validate_study(\"ManualStudy01\", path = proj_path),   error = function(e) print(paste(\"Validation Failed (invalid group link):\", e$message)) )  # --- Scenario 5: Validate without checking linkages --- # This should pass even with the bad group_label, as linkage check is skipped validate_study(\"ManualStudy01\", path = proj_path, check_linkages = FALSE)  # --- Clean up --- unlink(proj_path, recursive = TRUE) } # }"},{"path":"https://andjar.github.io/metawoRld/reference/validate_world.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate All Studies in a metawoRld Project — validate_world","title":"Validate All Studies in a metawoRld Project — validate_world","text":"Iterates study subdirectories within project's data/ directory runs validate_study() one check conformity project schema internal consistency.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/validate_world.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate All Studies in a metawoRld Project — validate_world","text":"","code":"validate_world(path = \".\", check_linkages = TRUE)"},{"path":"https://andjar.github.io/metawoRld/reference/validate_world.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate All Studies in a metawoRld Project — validate_world","text":"path Character string. path root directory metawoRld project. Defaults current working directory (.). check_linkages Logical. Passed validate_study() study. consistency checks data.csv metadata.yml performed? Defaults TRUE.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/validate_world.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate All Studies in a metawoRld Project — validate_world","text":"list containing: overall_status Character string: \"PASS\" studies validated successfully, \"FAIL\" otherwise. validated_studies Integer: number study directories checked. passed_studies Integer: number studies passed validation. failed_studies_count Integer: number studies failed validation. failed_studies_details list (named study_id) containing error messages studies failed validation. Empty passed. Prints informative messages validation progress summary.","code":""},{"path":"https://andjar.github.io/metawoRld/reference/validate_world.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate All Studies in a metawoRld Project — validate_world","text":"","code":"if (FALSE) { # \\dontrun{ # --- Setup: Create a project, add one valid study and one template --- proj_path <- file.path(tempdir(), \"validate_world_test\") create_metawoRld(   path = proj_path,   project_name = \"Validate World Test\",   project_description = \"Testing validate_world()\" )  # Add a valid study meta1 <- list(   study_id = \"S1\", title = \"Valid Study\", authors = list(\"A\"), year = 2021,   journal = \"J1\", study_design=\"Cohort\", country=\"X\", sample_type=\"Serum\",   outcome_groups = list(g1=list(name=\"Case\", def=\"...\"), g2=list(name=\"Ctrl\", def=\"...\")),   measurement_methods = list(m1=list(unit=\"pg/mL\", analysis_type=\"E\")) ) data1 <- data.frame(measurement_id=\"m1a\", method_ref_id=\"m1\", cytokine_name=\"CK1\",                     group_label=\"g1\", gestational_age_timing=\"T1\", n=10,                     statistic_type=\"mean_sd\", value1=5, value2=1) add_study_data(proj_path, \"S1\", meta1, data1)  # Add a template study (which will likely fail validation initially) add_study_template(proj_path, \"TemplateStudy\")  # Add an empty folder (should be skipped by validation logic within validate_study) fs::dir_create(file.path(proj_path, \"data\", \"EmptyFolder\")) # Add a folder with only metadata.yml (should fail in validate_study) fs::dir_create(file.path(proj_path, \"data\", \"MetadataOnly\")) file.copy(file.path(proj_path, \"data\", \"S1\", \"metadata.yml\"),           file.path(proj_path, \"data\", \"MetadataOnly\", \"metadata.yml\"))  # --- Run validation --- validation_results <- validate_world(path = proj_path)  # Print the results print(validation_results)  # --- Clean up --- unlink(proj_path, recursive = TRUE) } # }"}]
